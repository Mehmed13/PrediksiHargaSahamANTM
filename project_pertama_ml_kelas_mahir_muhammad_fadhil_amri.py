# -*- coding: utf-8 -*-
"""Project Pertama_ML_Kelas Mahir_Muhammad Fadhil Amri.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZZZP6OzH-sWMOJm18JR-uHOv1AIhL8cY

# Identitas Developer
> Nama : Muhammad Fadhil Amri <br>
> Email : fadhil.amri131202@gmail.com <br>
> Domisili: Kota Bandung <br>
> Pekerjaan : Mahasiswa Teknik Informatika ITB <br>

# Intro
> Proyek ini adalah proyek Machine Learning dengan task Time Series Forecasting pada harga saham PT Aneka Tambang Tbk. (ANTM) menggunakan data harga <i>Close</i> lima tahun terakhir (Februari 2019 - Februari 2024).<br><br>

# Program

## 1. Import Data
> Sumber Data: https://finance.yahoo.com/quote/ANTM.JK/history?period1=1609459200&period2=1703980800&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true
"""

import gdown

URL_DATA = "https://drive.google.com/uc?id=1zpH1bB8PEawHjg89D0oonx8ThMOBymdZ"
gdown.download(URL_DATA)

"""## 2. Load Data"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

DATASET_PATH = "/content/ANTM_Price_5Y.csv"
df = pd.read_csv(DATASET_PATH)
df.head()

"""## 3. Exploratory Data Analysis (EDA)

### Statistika Deskriptif
"""

# Informasi tipe data dari setiap fitur
df.info()

# Drop column selain Date dan Close karena prediksi hanya menggunakan harga close
df = df[['Date', 'Close']]
df.head()

# Deskripsi nilai dari fitur Close
df.describe()

"""### Missing Value"""

df.isna().sum()

"""> Terdapat missing value pada data

### Time Series Plot
"""

import matplotlib.pyplot as plt

df_temp = df.copy()
df_temp["Date"] = pd.to_datetime(df["Date"])
df_temp = df_temp.set_index("Date")

plt.figure(figsize=(10, 6))
df_temp.plot()
plt.title('Harga Saham ANTM')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.show()

# Hitung perubahan harga saham harian
df_temp['Percentage Change'] = df_temp['Close'].pct_change() * 100

# Plot the perubahan harga saham
plt.figure(figsize=(10, 6))
plt.plot(df_temp.index, df_temp['Percentage Change'], linestyle='-')
plt.title('Perubahan Harga Saham ANTM')
plt.xlabel('Date')
plt.ylabel('Price Change (%)')
plt.show()

"""### Distribusi Nilai"""

# Plot distribusi nilai pada fitur Close
plt.title("Distribusi harga Close saham ANTM")
sns.histplot(data=df['Close'], label='Close Price', fill=True)
plt.show()

# Tampilkan deskripsi statistik dari persentase perubahan
df_temp.describe()

"""### Outliers"""

# Identifikasi menggunakan boxplot

for numcol in df.select_dtypes(include="number").columns:
    plt.figure(figsize=(6,4))
    sns.boxplot(x=df[numcol])
    plt.show()
    print()

# Cek Outlier Pada Data

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR=Q3-Q1
outliers=df[((df<(Q1-1.5*IQR))|(df>(Q3+1.5*IQR))).any(axis=1)]

outliers

"""> Tidak terdapat outlier pada data

### Seasonal Decomposition
"""

from statsmodels.tsa.seasonal import seasonal_decompose

# Ubah data agar berada dalam frekuensi harian
df_temp = df_temp.asfreq('D')

# Isi harga saham pada saat pasar tutup dengan harga penutupan hari sebelumnya
df_temp['Close'] = df_temp['Close'].fillna(method='ffill')

# Plot seasonal decomposition
result = seasonal_decompose(df_temp['Close'], model='multiplicative')
result.plot()
plt.show()

"""> Data secara jangka panjang terdapat tren naik, sedangkan secara jangkap pendek-menengah terdapat tren turun dan terdapat <i>seasonality</i> bersamaan dengan tren tersebut

## 4. Preprocessing

### Format Data
"""

# Ubah data agar berada dalam frekuensi harian
df["Date"] = pd.to_datetime(df["Date"])
df = df.set_index("Date")
df = df.asfreq('D')
# df
# Isi harga saham pada saat pasar tutup dengan harga penutupan hari sebelumnya
df['Close'] = df['Close'].fillna(method='bfill')
df=df.reset_index()
df

"""### Split Data"""

from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

scaler = MinMaxScaler()
# scaler =StandardScaler()
# df['Close'] = scaler.fit_transform(df[['Close']])

X = df['Date']
y = df['Close']
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, shuffle=False)

"""### Data Scaling"""

# Fit hanya dilakukan pada data train agar model tidak terpengaruh oleh data validation

y_train_df = y_train.to_frame()
y_train_df["Close"] = scaler.fit_transform(y_train_df[["Close"]])
y_train_norm = y_train_df["Close"]

y_val_df = y_val.to_frame()
y_val_df["Close"] = scaler.transform(y_val_df[["Close"]])
y_val_norm = y_val_df["Close"]

y_train_norm

"""### Transforming"""

# Fungsi untuk menerima sebuah series/atribut yang telah di konversi menjadi tipe numpy, lalu mengembalikan label dan atribut dari dataset dalam bentuk batch
# Agar bisa diterima oleh model
import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1) # Menambahkan dimensi dari tensor, -1 berarti pada rank akhir
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

# Untuk Prophet format dataFrame yang digunakan adalah column ds untuk X dan column y untuk y

df_train = pd.DataFrame({'ds': X_train , 'y': y_train_norm })
df_val = pd.DataFrame({'ds': X_val , 'y': y_val_norm })

"""## 5. Model Development"""

# Callback function
import tensorflow as tf
from tensorflow.keras.callbacks import Callback

class ThresholdEarlyStopping(Callback):
    def __init__(self, error_threshold=0.05):
        super(ThresholdEarlyStopping, self).__init__()
        self.error_threshold = error_threshold

    def on_epoch_end(self, epoch, logs=None):
        # Check if both training and validation accuracy meet the threshold
        if logs.get('mse') <= self.error_threshold:
            print(f"\nTraining stopped as mse reached {self.error_threshold}")
            self.model.stop_training = True

threshold_early_stopping = ThresholdEarlyStopping(error_threshold=0.01)

"""### Prophet"""

! pip install prophet

from prophet import Prophet

# Interval kepercayaan 95%
model_prophet = Prophet(interval_width=0.95)

model_prophet.fit(df_train)

forecast_train = model_prophet.predict(df_train)
forecast_val = model_prophet.predict(df_val)

"""### LSTM"""

train_set = windowed_dataset(y_train_norm, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(y_val_norm, window_size=60, batch_size=100, shuffle_buffer=1000)

model_lstm = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True), # Harus diset agar bisa menggunakan dua buah layer LSTM
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.SGD(learning_rate=5.0000e-04, momentum=0.9)
model_lstm.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mse"])
history_lstm = model_lstm.fit(train_set, validation_data= val_set, epochs=30, callbacks=[threshold_early_stopping])

"""## 6. Evaluasi"""

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing
import math
from sklearn.metrics import mean_squared_error
mse = pd.DataFrame(columns=['train', 'val'], index=['Prophet','LSTM'])

# Buat dictionary untuk setiap algoritma yang digunakan

mse.loc['Prophet', 'train'] = mean_squared_error(y_true=df_train['y'], y_pred=forecast_train['yhat'])
mse.loc['Prophet', 'val'] = mean_squared_error(y_true=df_val['y'], y_pred=forecast_val['yhat'])
mse.loc['LSTM', 'train'] = history_lstm.history['mse'][-1]
mse.loc['LSTM', 'val'] = history_lstm.history['val_mse'][-1]

# Panggil mse
mse

"""> Dapat dilihat bahwa model Prophet memiliki MSE yang lebih kecil daripada model LSTM sehingga model yang akan dipilih untuk melakukan <i> forecasting </i> adalah model Prophet

## 7. Forecasting

> Melakukan Prediksi untuk setahun ke depan (2024)
"""

df = df.rename(columns={'Date':'ds', 'Close':'y'})
df.head()

model_final = Prophet(interval_width=0.95)
model_final.fit(df)

future_dates = model_final.make_future_dataframe(periods=365, freq='D')
forecast = model_final.predict(future_dates)

plt.figure(figsize=(10, 6))
plt.plot(pd.to_datetime(df['ds']), df['y'], linestyle='-', label='actual')
plt.plot(pd.to_datetime(forecast['ds']), forecast['yhat'], linestyle='-', label='predicted')
plt.legend()
plt.title("Harga saham ANTM")
plt.xlabel("Date")
plt.ylabel("Price")
plt.show()

forecast[['ds', 'yhat']]

"""> Berdasarkan grafik prediksi harga saham ANTM selama satu tahun, dapat diperkirakan bahwa waktu yang terbaik untuk membeli saham ANTM pada saat harga berada pada kisaran 1.350 - 1.400 dan menjualnya untuk <i> take profit </i> terdekat pada level 1.700"""